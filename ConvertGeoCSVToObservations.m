function ConvertGeoCSVToObservations(csvfilename, outputdir)
%usage: ConvertGeoCSVToObservations(csvfilename, outputdir)
% generate Observations data from DLC geometry, formatted for input to SSM
% Reads geometry variables from the CSV file generated by Nick's code
% expects an absolute path for csvfilename
% mw 11.24.21

% redesigned Feb 2021 for the new camera data (replaces ConvertTracksToObservations)
% concatenates some variables into a single matrix, and
% then saves as a mat file
%

% we are dropping these variables because they use nans to encode
% left/right, and we can only use numerical data for analysis 
% rightMCangle
% leftMCangle
% rightazimuth
% leftazimuth

% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 6);

% Specify range and delimiter
opts.DataLines = [2 Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["sessionID", "tracks_filename", "dist", "cricket_spd", "mouse_spd", "az"];
% opts.SelectedVariableNames = "filename";
opts.VariableTypes = ["string", "string", "double", "double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
%opts = setvaropts(opts, ["Var1", "Var3", "Var4", "Var5", "Var6"], "WhitespaceRule", "preserve");
%opts = setvaropts(opts, ["Var1", "filename", "Var3", "Var4", "Var5", "Var6"], "EmptyFieldRule", "auto");

% Import the data
T = readtable(csvfilename, opts);


% Clear temporary variables
clear opts

M=table2array(T);
X=M(:,[3:6]); %drop first column, which is sessionID

X=T{:,3:6};

sessionbyframe=M(:,1);
DLCtracks_filename_byframe=M(:,2);

X_description{1}='range';
X_description{2}='mousespeed';
X_description{3}='cricketspeed';
X_description{4}='azimuth';

tracks=[]; %still need to write code to load DLC tracks

tracks_description{1}='smbodyCOM1x';
tracks_description{2}='smbodyCOM1y';
tracks_description{3}='smheadbase1x';
tracks_description{4}='smheadbase1y';
tracks_description{5}='smnose1x';
tracks_description{6}='smnose1y';
tracks_description{7}='smcricketx';
tracks_description{8}='smcrickety';

%X=real(X); %is this necessary?

% %normalize X
% rawX=X; %non-normalized
% for j=1: size(rawX, 2)
%     X(:,j)=rawX(:,j)./max(abs(rawX(:,j))); %normalize
% end

%normalize by z-score
rawX=X;
mu = nanmean(X);
sigma = nanstd(X);
sigma0 = sigma;
sigma0(sigma0==0) = 1;
X = (X-mu) ./ sigma0;

if sum(isnan(X(:)))> 10%length(X)
    warning('nans during zscore')
end



warning('to-do: convert azimuth to sin/cos and gaussianize')


framerate=200; %hard coded, where is framerate stored so we can read it instead?
%try downsampling to about 30Hz
decimate_factor=round(framerate/40);
for i=1:size(X, 2)
    %     replace nans on last frame of diffed variables with frame n-1
   % X(find(isnan(X(:,i))), i)=X(find(isnan(X(:,i)))-1, i);
   X(find(isnan(X(:,i))), i)=0;
   warning('replacing NaNs with zeros, not a good idea')
     decX(:,i)=decimate(X(:,i), decimate_factor);
    
end
undecX=X;
X=decX;
fprintf('\ndecimated observations by %dx', decimate_factor)

cd(outputdir)
run_on=sprintf('generated by %s on %s', mfilename, datestr(now));
generated_by=mfilename;
save training_data X rawX X_description run_on   ...
    outputdir  sessionbyframe tracks tracks_description ...
    decX decimate_factor undecX framerate
fprintf('\nsaved observations to file training_data.mat in %s', outputdir)

