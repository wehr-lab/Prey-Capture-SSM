function ConvertGeoCSVToObservations(csvfilename, outputdir)
%usage: ConvertGeoCSVToObservations(csvfilename, outputdir)
% generate Observations data from DLC geometry, formatted for input to SSM
% Reads geometry variables from the CSV file generated by Nick's code
% expects an absolute path for csvfilename
% mw 11.24.21

% redesigned Feb 2021 for the new camera data (replaces ConvertTracksToObservations)
% concatenates some variables into a single matrix, and
% then saves as a mat file
%

% we are dropping these variables because they use nans to encode
% left/right, and we can only use numerical data for analysis 
% rightMCangle
% leftMCangle
% rightazimuth
% leftazimuth

T=readtable(csvfilename);
M=table2array(T);
X=M(:,[2:9 12]); %drop first column, which is sessionID
sessionbyframe=M(:,1);

X_description{1}='range';
X_description{2}='mousespeed';
X_description{3}='mousevelocity1';
X_description{4}='mousevelocity2';

X_description{5}='cricketspeed';
X_description{6}='cricketvelocity1';
X_description{7}='cricketvelocity2';
X_description{8}= 'MCangle';
X_description{9}='azimuth';

X=real(X);

%normalize X
rawX=X; %non-normalized
for j=1: size(rawX, 2)
    X(:,j)=rawX(:,j)./max(abs(rawX(:,j))); %normalize
end

framerate=200; %hard coded, where is framerate stored so we can read it instead?
%try downsampling to about 30Hz
decimate_factor=round(framerate/40);
for i=1:size(X, 2)
    %     replace nans on last frame of diffed variables with frame n-1
    X(find(isnan(X(:,i))), i)=X(find(isnan(X(:,i)))-1, i);
    decX(:,i)=decimate(X(:,i), decimate_factor);
end
undecX=X;
X=decX;
fprintf('\ndecimated observations by %dx', decimate_factor)

cd(outputdir)
run_on=sprintf('generated by %s on %s', mfilename, datestr(now));
generated_by=mfilename;
save training_data X rawX X_description run_on   ...
    outputdir  sessionbyframe ...
    decX decimate_factor undecX framerate
fprintf('\nsaved observations to file training_data.mat in %s', outputdir)

