function PlotStatePSTH(outputdir)
%Usage: PlotStatePSTH(outputdir)
%
% align spiking data to state and epoch boundaries
% uses pruned_tpm.mat generated by PruneTPM

%hmm this should be for a cell, or repeated for simultaneously recorded
%cells. But the hmm is run on an entire dirlist, which has many independent recordings
% I guess we could start with one cell and then repeat for the whole dirlist
% maybe we should save the state-epoch boundaries in the datadir?

%if nargin==0 fprintf('no input\nUsage: PlotStatePSTH(outputdir)\n');return;end

if nargin==0
    close all
    outputdir=pwd;
end

fprintf('%s', outputdir)
cd (outputdir)
outpsfilename='state-psths.ps';
delete(outpsfilename)
load('pruned_tpm.mat')
td=load('training_data.mat');


cumstartframe=1;
for i=1:length(td.datadirs);
    numframes=td.groupdata(i).numframes;
    cumstartframes(i)=cumstartframe;
    cumstopframes(i)=cumstartframe+numframes-1;
    cumstartframe=cumstartframe+numframes;
end


for i=1:length(td.datadirs);
    if ismember(i, [61 62 63 64 65 66  ]) %messed up data
        %keyboard
    else
        
        % localframenum comes from ConvertGeometryToObservations and
        % already accounts for trimming from cricket drop frame to catch
        % frame
        
        if get(gcf, 'Number')>20 keyboard;end
        
        cricketdropframe=td.groupdata(i).cricketdropframe;
        catchframe=td.groupdata(i).catchframe;
        if catchframe>td.groupdata(i).numframes
            %rare case where catch=last frame and there's an off-by-one error
            catchframe=td.groupdata(i).numframes;
        end
        %the geometry variables run from cricketdropframe to catchframe
        
        %plot some geometry for this recording
        t=1:length(td.groupdata(i).range);
        t=t/td.groupdata(i).framerate;
        fig1=figure;
        [~,dirname]=fileparts(td.datadirs{i});
        title(dirname);
        hold on
        range=td.groupdata(i).range;
        nrange=range/max(abs(range));
        speed=td.groupdata(i).speed;
        nspeed=speed/max(abs(speed));
        cspeed=td.groupdata(i).cspeed;
        ncspeed=cspeed/max(abs(cspeed));
        RelativeAzimuth=td.groupdata(i).RelativeAzimuth;
        nRelativeAzimuth=RelativeAzimuth/max(abs(RelativeAzimuth));
        mouse_thigmo_distance=td.groupdata(i).mouse_thigmo_distance;
        nmouse_thigmo_distance=mouse_thigmo_distance/max(abs(mouse_thigmo_distance));
        plot(t, nrange, 'linew', 2)
        plot(t, nspeed, 'linew', 2)
        plot(t, ncspeed, 'linew', 2)
        plot(t, nRelativeAzimuth, 'linew', 2)
        plot(t, nmouse_thigmo_distance, 'linew', 2)
        numframes=length(t);
        localZ=Zundec(cumstartframes(i):cumstopframes(i));
        plot( t, 1+.25*double(localZ)/num_states)
        legend('range', 'mouse speed', 'cricket speed', 'azimuth', 'thigmo', 'Z',...
            'AutoUpdate','off', 'location',  'eastoutside')
        xlabel('time, s')
        
        %get spiketimes and alignment
        datadir=td.datadirs{i};
        if ismac datadir=macifypath(datadir);end
        cd(datadir)
        [vids,units,chans] = AssimilateSignals(cricketdropframe, catchframe);
        
        %plot rasters aligned to the geometry variables
        numunits=length(units);
        cmap=jet(numunits);
        offset=1.25;
        for u=1:numunits
            offset=offset+.05;
            start=units(1).start;
            stop=units(1).stop;
            spiketimes=units(u).spiketimes;
            spiketimes=spiketimes-start; %align to cricketdrop
            plot(spiketimes, zeros(size(spiketimes))+offset, '.', 'markersize', 20, 'color', cmap(u,:))
        end
        xlim([0 t(catchframe)])
        yl=ylim;
        yl(2)=yl(2)+.05;
        ylim(yl);
        
        %plot states/epochs as shaded boxes
        % figure('pos', [430   923   560   420])
        % hold on
        kcolors=jet(pruned_num_states);
        for k=1:pruned_num_states
            %find epoch starts within this trial
            epoch_start_idx=find(pruned_epochs(k).starts>cumstartframes(i) & ...
                pruned_epochs(k).starts<cumstopframes(i));
            epoch_starts=pruned_epochs(k).starts(epoch_start_idx);
            %find epoch stops within this trial
            epoch_stop_idx=find(pruned_epochs(k).stops>cumstartframes(i) & ...
                pruned_epochs(k).stops<=cumstopframes(i));
            epoch_stops=pruned_epochs(k).stops(epoch_stop_idx);
            
            for e=1:length(epoch_starts)
                if e>length(epoch_stops)
                    warning(sprintf('bailing: missing epoch stop for k=%d e=%d',k,e))
                else
                    c=kcolors(k,:);
                    Xidx=[epoch_starts(e), epoch_starts(e), epoch_stops(e), epoch_stops(e)];
                    Xidx=Xidx-cumstartframes(i); % convert to local frames
                    X=t(Xidx); %convert to local time in seconds (to match spiketimes)
                    Y=[1 yl(2) yl(2)  1];
                    jb=fill(X, Y, c, 'facealpha', .25, 'edgecolor', 'none');
                    
                    text(X(1), Y(2), int2str(k), 'verticalalign', 'top')
                    
                end
            end
            %             %plot rasters aligned to the shaded state epochs
            %             cmap=jet(numunits);
            %             offset=0;
            %             for u=1:numunits
            %                 offset=offset+1;
            %                 start=units(1).start;
            %                 stop=units(1).stop;
            %                 spiketimes=units(u).spiketimes;
            %                 spiketimes=spiketimes-start; %align to cricketdrop
            %                 plot(spiketimes, zeros(size(spiketimes))+offset, '.', 'markersize', 20, 'color', cmap(u,:))
            %             end
        end
        
        %plot epoch-aligned rasters and firing rates
        cmap=jet(numunits);
        fig2=figure('pos', [1570 144  924  1201]);
        title(dirname);
        
        %count how many states occured on this trial
        %so we can set up the plot to only plot those
        P=0;
        for k=1:pruned_num_states
            epoch_start_idx=find(pruned_epochs(k).starts>cumstartframes(i) & ...
                pruned_epochs(k).starts<cumstopframes(i));
            epoch_starts=pruned_epochs(k).starts(epoch_start_idx);
            if length(epoch_starts)>0
                P=P+1;
            end
        end
        
        subplot1(P, 1)
        p=0;
        for k=1:pruned_num_states
            offset=0;
            %find epoch starts within this trial
            epoch_start_idx=find(pruned_epochs(k).starts>cumstartframes(i) & ...
                pruned_epochs(k).starts<cumstopframes(i));
            epoch_starts=pruned_epochs(k).starts(epoch_start_idx);
            if length(epoch_starts)>0
                p=p+1;
                subplot1(p)
                hold on
                ylabel(sprintf('state %d\n%d epochs', k,length(epoch_starts) ))
                
                clear fr nfr
                for u=1:numunits
                    start=units(1).start;
                    stop=units(1).stop;
                    spiketimes=units(u).spiketimes;
                    spiketimes=spiketimes-start; %align to cricketdrop
                    allst=[];
                    for e=1:length(epoch_starts)
                        offset=offset+1;
                        Xidx=epoch_starts(e);
                        Xidx=Xidx-cumstartframes(i); % convert to local frames
                        X=t(Xidx); %convert to local time in seconds (to match spiketimes)
                        st=spiketimes(find(spiketimes>X-.500 & spiketimes<X+.7500)); %extract spikes in a window around epoch start
                        st=st-X; %align to epoch start time
                        plot(st, zeros(size(st))+offset, '.', 'markersize', 20, 'color', cmap(u,:))
                        allst=[allst st];
                    end
                    if ~isempty(allst)
                        
                        %psth=conv(allst, gaussian(100, .25));
                        [n,x]=hist(allst, [-.5:.01:.75]);
                        temp=smooth(n);
                    else
                        temp=zeros(size(([-.5:.01:.75])));
                    end
                    fr(u,:)=temp;
                end
                nfr=fr./max(fr(:)); %normalize
                
                for u=1:numunits
                    scale=length(epoch_starts);
                    offset=u*scale;
                    plot(x, scale*nfr(u,:)+offset, 'color', cmap(u,:), 'linewidth', 2)
                    
                end
                line([0 0], ylim)
                xlim([-.1 .5])
                
            end
            
        end
        xlabel('time, s')
        
    end
    
    fprintf('\ndir %d/%d', i, length(td.datadirs))
    fprintf('\n_____________________________________________________\n')
    
    
    cd(outputdir)
    try
        figure(fig1);
        print(outpsfilename, '-dpsc2', '-append', '-bestfit')
        close
        figure(fig2);
        orient tall
        print(outpsfilename, '-dpsc2', '-append', '-bestfit')
        close
    end
end



















